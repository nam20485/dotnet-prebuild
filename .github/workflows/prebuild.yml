---
name: Pre-build dev container image

on:
  # push:
  #   branches:
  #     - main
  workflow_run:
    workflows: [Publish Docker]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nam20485/dotnet-prebuild
  VERSION_IMAGE_TAG: "${{ vars.VERSION_PREFIX }}.${{ github.run_number }}"

jobs:
  prebuild:
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write # Required for uploading SARIF to Code Scanning

    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-build dev container image
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6
        id: prebuild
        with:
          subFolder: .github
          imageName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          cacheFrom: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          imageTag: ${{github.ref_name}}-latest, ${{github.ref_name}}-${{ env.VERSION_IMAGE_TAG }}
          push: never

      - name: Push versioned image to registry
        env:
          VERSIONED_IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{github.ref_name}}-${{ env.VERSION_IMAGE_TAG }}
          LATEST_IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{github.ref_name}}-latest
        run: |
          set -euo pipefail
          # Push synchronously so RepoDigests are populated before signing
          docker push ${{ env.VERSIONED_IMAGE_FULL }}
          docker push ${{ env.LATEST_IMAGE_FULL }}

      - name: Pull image for digest extraction
        env:
          VERSIONED_IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{github.ref_name}}-${{ env.VERSION_IMAGE_TAG }}
        run: docker pull ${{ env.VERSIONED_IMAGE_FULL }}

      - name: Output Image Digest
        id: get-image-digest
        env:
          VERSIONED_IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{github.ref_name}}-${{ env.VERSION_IMAGE_TAG }}
        run: |
          FULL_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.VERSIONED_IMAGE_FULL }})
          DIGEST_ONLY=${FULL_DIGEST##*@}
          echo "IMAGE_DIGEST=$DIGEST_ONLY" >> "$GITHUB_OUTPUT"

      - name: Attest
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.get-image-digest.outputs.IMAGE_DIGEST }}
          push-to-registry: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da

      - name: Sign container image with Cosign
        env:
          DIGEST: ${{ steps.get-image-digest.outputs.IMAGE_DIGEST }}
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@$DIGEST

      - name: Free up disk space for Trivy
        run: |
          echo "Disk space before cleanup:"
          df -h
          docker image prune -a -f
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          echo "Disk space after cleanup:"
          df -h

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        env:
          VERSIONED_IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{github.ref_name}}-${{ env.VERSION_IMAGE_TAG }}
        with:
          image-ref: ${{ env.VERSIONED_IMAGE_FULL }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
